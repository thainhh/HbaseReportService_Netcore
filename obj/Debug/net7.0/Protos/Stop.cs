// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/stop.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace HbaseReportService {

  /// <summary>Holder for reflection information generated from Protos/stop.proto</summary>
  public static partial class StopReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/stop.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StopReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFQcm90b3Mvc3RvcC5wcm90bxIEc3RvcCI6ChFSZXBvcnRTdG9wUmVxdWVz",
            "dBIRCgljb21wYW55SWQYASABKAUSEgoKdmVoaWNsZUlkcxgCIAEoCSKnAQoP",
            "UmVwb3J0U3RvcFJlcGx5EiQKCnJlcG9ydFN0b3AYASADKAsyEC5zdG9wLlJl",
            "cG9ydFN0b3ASDQoFdG90YWwYAiABKAMSFQoNdG90YWxUaW1lU3RvcBgDIAEo",
            "AxIhChl0b3RhbFNlY29uZHNUdXJuTWFjaGluZU9uGAQgASgDEiUKHXRvdGFs",
            "U2Vjb25kc1R1cm5Db25kaXRpb25lck9uGAUgASgDIvgCCgpSZXBvcnRTdG9w",
            "EhEKCWNvbXBhbnlJZBgBIAEoAxIRCgl2ZWhpY2xlSWQYAiABKAMSEQoJc3Rh",
            "cnRUaW1lGAMgASgDEg8KB2VuZFRpbWUYBCABKAMSEAoIbGF0aXR1ZGUYBSAB",
            "KAESEQoJbG9uZ2l0dWRlGAYgASgBEhUKDXRvdGFsVGltZVN0b3AYByABKAMS",
            "IQoZdG90YWxTZWNvbmRzVHVybk1hY2hpbmVPbhgIIAEoAxISCgpkcml2ZXJO",
            "YW1lGAkgASgJEhUKDWxpY2Vuc2VOdW1iZXIYCiABKAkSJgoedG90YWxTZWNv",
            "bmRlc1R1cm5Db25kaXRpb25lck9uGAsgASgDEg8KB3ZiZWZvcmUYDCABKAUS",
            "FAoMY3VycmVudEtNR1BTGA0gASgBEhMKC3RlbXBlcmF0dXJlGA4gASgJEhEK",
            "CXN0YXJ0RnVlbBgPIAEoARIPCgdlbmRGdWVsGBAgASgBEg4KBmNlbGxJRBgR",
            "IAEoAzJLCgRTdG9wEkMKEUdldFJlcG9ydFN0b3BQYWdlEhcuc3RvcC5SZXBv",
            "cnRTdG9wUmVxdWVzdBoVLnN0b3AuUmVwb3J0U3RvcFJlcGx5QhWqAhJIYmFz",
            "ZVJlcG9ydFNlcnZpY2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::HbaseReportService.ReportStopRequest), global::HbaseReportService.ReportStopRequest.Parser, new[]{ "CompanyId", "VehicleIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HbaseReportService.ReportStopReply), global::HbaseReportService.ReportStopReply.Parser, new[]{ "ReportStop", "Total", "TotalTimeStop", "TotalSecondsTurnMachineOn", "TotalSecondsTurnConditionerOn" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::HbaseReportService.ReportStop), global::HbaseReportService.ReportStop.Parser, new[]{ "CompanyId", "VehicleId", "StartTime", "EndTime", "Latitude", "Longitude", "TotalTimeStop", "TotalSecondsTurnMachineOn", "DriverName", "LicenseNumber", "TotalSecondesTurnConditionerOn", "Vbefore", "CurrentKMGPS", "Temperature", "StartFuel", "EndFuel", "CellID" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ReportStopRequest : pb::IMessage<ReportStopRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReportStopRequest> _parser = new pb::MessageParser<ReportStopRequest>(() => new ReportStopRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportStopRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HbaseReportService.StopReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportStopRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportStopRequest(ReportStopRequest other) : this() {
      companyId_ = other.companyId_;
      vehicleIds_ = other.vehicleIds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportStopRequest Clone() {
      return new ReportStopRequest(this);
    }

    /// <summary>Field number for the "companyId" field.</summary>
    public const int CompanyIdFieldNumber = 1;
    private int companyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CompanyId {
      get { return companyId_; }
      set {
        companyId_ = value;
      }
    }

    /// <summary>Field number for the "vehicleIds" field.</summary>
    public const int VehicleIdsFieldNumber = 2;
    private string vehicleIds_ = "";
    /// <summary>
    ///google.protobuf.Timestamp fromDate = 3 ;
    ///google.protobuf.Timestamp toDate = 4 ;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VehicleIds {
      get { return vehicleIds_; }
      set {
        vehicleIds_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportStopRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportStopRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompanyId != other.CompanyId) return false;
      if (VehicleIds != other.VehicleIds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompanyId != 0) hash ^= CompanyId.GetHashCode();
      if (VehicleIds.Length != 0) hash ^= VehicleIds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CompanyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CompanyId);
      }
      if (VehicleIds.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VehicleIds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CompanyId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CompanyId);
      }
      if (VehicleIds.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VehicleIds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompanyId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CompanyId);
      }
      if (VehicleIds.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VehicleIds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportStopRequest other) {
      if (other == null) {
        return;
      }
      if (other.CompanyId != 0) {
        CompanyId = other.CompanyId;
      }
      if (other.VehicleIds.Length != 0) {
        VehicleIds = other.VehicleIds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CompanyId = input.ReadInt32();
            break;
          }
          case 18: {
            VehicleIds = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CompanyId = input.ReadInt32();
            break;
          }
          case 18: {
            VehicleIds = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReportStopReply : pb::IMessage<ReportStopReply>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReportStopReply> _parser = new pb::MessageParser<ReportStopReply>(() => new ReportStopReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportStopReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HbaseReportService.StopReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportStopReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportStopReply(ReportStopReply other) : this() {
      reportStop_ = other.reportStop_.Clone();
      total_ = other.total_;
      totalTimeStop_ = other.totalTimeStop_;
      totalSecondsTurnMachineOn_ = other.totalSecondsTurnMachineOn_;
      totalSecondsTurnConditionerOn_ = other.totalSecondsTurnConditionerOn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportStopReply Clone() {
      return new ReportStopReply(this);
    }

    /// <summary>Field number for the "reportStop" field.</summary>
    public const int ReportStopFieldNumber = 1;
    private static readonly pb::FieldCodec<global::HbaseReportService.ReportStop> _repeated_reportStop_codec
        = pb::FieldCodec.ForMessage(10, global::HbaseReportService.ReportStop.Parser);
    private readonly pbc::RepeatedField<global::HbaseReportService.ReportStop> reportStop_ = new pbc::RepeatedField<global::HbaseReportService.ReportStop>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::HbaseReportService.ReportStop> ReportStop {
      get { return reportStop_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 2;
    private long total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "totalTimeStop" field.</summary>
    public const int TotalTimeStopFieldNumber = 3;
    private long totalTimeStop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalTimeStop {
      get { return totalTimeStop_; }
      set {
        totalTimeStop_ = value;
      }
    }

    /// <summary>Field number for the "totalSecondsTurnMachineOn" field.</summary>
    public const int TotalSecondsTurnMachineOnFieldNumber = 4;
    private long totalSecondsTurnMachineOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSecondsTurnMachineOn {
      get { return totalSecondsTurnMachineOn_; }
      set {
        totalSecondsTurnMachineOn_ = value;
      }
    }

    /// <summary>Field number for the "totalSecondsTurnConditionerOn" field.</summary>
    public const int TotalSecondsTurnConditionerOnFieldNumber = 5;
    private long totalSecondsTurnConditionerOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSecondsTurnConditionerOn {
      get { return totalSecondsTurnConditionerOn_; }
      set {
        totalSecondsTurnConditionerOn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportStopReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportStopReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!reportStop_.Equals(other.reportStop_)) return false;
      if (Total != other.Total) return false;
      if (TotalTimeStop != other.TotalTimeStop) return false;
      if (TotalSecondsTurnMachineOn != other.TotalSecondsTurnMachineOn) return false;
      if (TotalSecondsTurnConditionerOn != other.TotalSecondsTurnConditionerOn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= reportStop_.GetHashCode();
      if (Total != 0L) hash ^= Total.GetHashCode();
      if (TotalTimeStop != 0L) hash ^= TotalTimeStop.GetHashCode();
      if (TotalSecondsTurnMachineOn != 0L) hash ^= TotalSecondsTurnMachineOn.GetHashCode();
      if (TotalSecondsTurnConditionerOn != 0L) hash ^= TotalSecondsTurnConditionerOn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      reportStop_.WriteTo(output, _repeated_reportStop_codec);
      if (Total != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Total);
      }
      if (TotalTimeStop != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalTimeStop);
      }
      if (TotalSecondsTurnMachineOn != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalSecondsTurnMachineOn);
      }
      if (TotalSecondsTurnConditionerOn != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalSecondsTurnConditionerOn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      reportStop_.WriteTo(ref output, _repeated_reportStop_codec);
      if (Total != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Total);
      }
      if (TotalTimeStop != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalTimeStop);
      }
      if (TotalSecondsTurnMachineOn != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalSecondsTurnMachineOn);
      }
      if (TotalSecondsTurnConditionerOn != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalSecondsTurnConditionerOn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += reportStop_.CalculateSize(_repeated_reportStop_codec);
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      if (TotalTimeStop != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalTimeStop);
      }
      if (TotalSecondsTurnMachineOn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSecondsTurnMachineOn);
      }
      if (TotalSecondsTurnConditionerOn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSecondsTurnConditionerOn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportStopReply other) {
      if (other == null) {
        return;
      }
      reportStop_.Add(other.reportStop_);
      if (other.Total != 0L) {
        Total = other.Total;
      }
      if (other.TotalTimeStop != 0L) {
        TotalTimeStop = other.TotalTimeStop;
      }
      if (other.TotalSecondsTurnMachineOn != 0L) {
        TotalSecondsTurnMachineOn = other.TotalSecondsTurnMachineOn;
      }
      if (other.TotalSecondsTurnConditionerOn != 0L) {
        TotalSecondsTurnConditionerOn = other.TotalSecondsTurnConditionerOn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            reportStop_.AddEntriesFrom(input, _repeated_reportStop_codec);
            break;
          }
          case 16: {
            Total = input.ReadInt64();
            break;
          }
          case 24: {
            TotalTimeStop = input.ReadInt64();
            break;
          }
          case 32: {
            TotalSecondsTurnMachineOn = input.ReadInt64();
            break;
          }
          case 40: {
            TotalSecondsTurnConditionerOn = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            reportStop_.AddEntriesFrom(ref input, _repeated_reportStop_codec);
            break;
          }
          case 16: {
            Total = input.ReadInt64();
            break;
          }
          case 24: {
            TotalTimeStop = input.ReadInt64();
            break;
          }
          case 32: {
            TotalSecondsTurnMachineOn = input.ReadInt64();
            break;
          }
          case 40: {
            TotalSecondsTurnConditionerOn = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReportStop : pb::IMessage<ReportStop>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReportStop> _parser = new pb::MessageParser<ReportStop>(() => new ReportStop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReportStop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::HbaseReportService.StopReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportStop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportStop(ReportStop other) : this() {
      companyId_ = other.companyId_;
      vehicleId_ = other.vehicleId_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      totalTimeStop_ = other.totalTimeStop_;
      totalSecondsTurnMachineOn_ = other.totalSecondsTurnMachineOn_;
      driverName_ = other.driverName_;
      licenseNumber_ = other.licenseNumber_;
      totalSecondesTurnConditionerOn_ = other.totalSecondesTurnConditionerOn_;
      vbefore_ = other.vbefore_;
      currentKMGPS_ = other.currentKMGPS_;
      temperature_ = other.temperature_;
      startFuel_ = other.startFuel_;
      endFuel_ = other.endFuel_;
      cellID_ = other.cellID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReportStop Clone() {
      return new ReportStop(this);
    }

    /// <summary>Field number for the "companyId" field.</summary>
    public const int CompanyIdFieldNumber = 1;
    private long companyId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CompanyId {
      get { return companyId_; }
      set {
        companyId_ = value;
      }
    }

    /// <summary>Field number for the "vehicleId" field.</summary>
    public const int VehicleIdFieldNumber = 2;
    private long vehicleId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VehicleId {
      get { return vehicleId_; }
      set {
        vehicleId_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private long startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private long endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 5;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 6;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "totalTimeStop" field.</summary>
    public const int TotalTimeStopFieldNumber = 7;
    private long totalTimeStop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalTimeStop {
      get { return totalTimeStop_; }
      set {
        totalTimeStop_ = value;
      }
    }

    /// <summary>Field number for the "totalSecondsTurnMachineOn" field.</summary>
    public const int TotalSecondsTurnMachineOnFieldNumber = 8;
    private long totalSecondsTurnMachineOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSecondsTurnMachineOn {
      get { return totalSecondsTurnMachineOn_; }
      set {
        totalSecondsTurnMachineOn_ = value;
      }
    }

    /// <summary>Field number for the "driverName" field.</summary>
    public const int DriverNameFieldNumber = 9;
    private string driverName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DriverName {
      get { return driverName_; }
      set {
        driverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "licenseNumber" field.</summary>
    public const int LicenseNumberFieldNumber = 10;
    private string licenseNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LicenseNumber {
      get { return licenseNumber_; }
      set {
        licenseNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totalSecondesTurnConditionerOn" field.</summary>
    public const int TotalSecondesTurnConditionerOnFieldNumber = 11;
    private long totalSecondesTurnConditionerOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSecondesTurnConditionerOn {
      get { return totalSecondesTurnConditionerOn_; }
      set {
        totalSecondesTurnConditionerOn_ = value;
      }
    }

    /// <summary>Field number for the "vbefore" field.</summary>
    public const int VbeforeFieldNumber = 12;
    private int vbefore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vbefore {
      get { return vbefore_; }
      set {
        vbefore_ = value;
      }
    }

    /// <summary>Field number for the "currentKMGPS" field.</summary>
    public const int CurrentKMGPSFieldNumber = 13;
    private double currentKMGPS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurrentKMGPS {
      get { return currentKMGPS_; }
      set {
        currentKMGPS_ = value;
      }
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 14;
    private string temperature_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Temperature {
      get { return temperature_; }
      set {
        temperature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "startFuel" field.</summary>
    public const int StartFuelFieldNumber = 15;
    private double startFuel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StartFuel {
      get { return startFuel_; }
      set {
        startFuel_ = value;
      }
    }

    /// <summary>Field number for the "endFuel" field.</summary>
    public const int EndFuelFieldNumber = 16;
    private double endFuel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EndFuel {
      get { return endFuel_; }
      set {
        endFuel_ = value;
      }
    }

    /// <summary>Field number for the "cellID" field.</summary>
    public const int CellIDFieldNumber = 17;
    private long cellID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CellID {
      get { return cellID_; }
      set {
        cellID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReportStop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReportStop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompanyId != other.CompanyId) return false;
      if (VehicleId != other.VehicleId) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
      if (TotalTimeStop != other.TotalTimeStop) return false;
      if (TotalSecondsTurnMachineOn != other.TotalSecondsTurnMachineOn) return false;
      if (DriverName != other.DriverName) return false;
      if (LicenseNumber != other.LicenseNumber) return false;
      if (TotalSecondesTurnConditionerOn != other.TotalSecondesTurnConditionerOn) return false;
      if (Vbefore != other.Vbefore) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentKMGPS, other.CurrentKMGPS)) return false;
      if (Temperature != other.Temperature) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StartFuel, other.StartFuel)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EndFuel, other.EndFuel)) return false;
      if (CellID != other.CellID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompanyId != 0L) hash ^= CompanyId.GetHashCode();
      if (VehicleId != 0L) hash ^= VehicleId.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      if (Latitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
      if (Longitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
      if (TotalTimeStop != 0L) hash ^= TotalTimeStop.GetHashCode();
      if (TotalSecondsTurnMachineOn != 0L) hash ^= TotalSecondsTurnMachineOn.GetHashCode();
      if (DriverName.Length != 0) hash ^= DriverName.GetHashCode();
      if (LicenseNumber.Length != 0) hash ^= LicenseNumber.GetHashCode();
      if (TotalSecondesTurnConditionerOn != 0L) hash ^= TotalSecondesTurnConditionerOn.GetHashCode();
      if (Vbefore != 0) hash ^= Vbefore.GetHashCode();
      if (CurrentKMGPS != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentKMGPS);
      if (Temperature.Length != 0) hash ^= Temperature.GetHashCode();
      if (StartFuel != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StartFuel);
      if (EndFuel != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EndFuel);
      if (CellID != 0L) hash ^= CellID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CompanyId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CompanyId);
      }
      if (VehicleId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(VehicleId);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndTime);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Longitude);
      }
      if (TotalTimeStop != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TotalTimeStop);
      }
      if (TotalSecondsTurnMachineOn != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(TotalSecondsTurnMachineOn);
      }
      if (DriverName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DriverName);
      }
      if (LicenseNumber.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(LicenseNumber);
      }
      if (TotalSecondesTurnConditionerOn != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(TotalSecondesTurnConditionerOn);
      }
      if (Vbefore != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Vbefore);
      }
      if (CurrentKMGPS != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(CurrentKMGPS);
      }
      if (Temperature.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Temperature);
      }
      if (StartFuel != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(StartFuel);
      }
      if (EndFuel != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(EndFuel);
      }
      if (CellID != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(CellID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CompanyId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CompanyId);
      }
      if (VehicleId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(VehicleId);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndTime);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Longitude);
      }
      if (TotalTimeStop != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TotalTimeStop);
      }
      if (TotalSecondsTurnMachineOn != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(TotalSecondsTurnMachineOn);
      }
      if (DriverName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DriverName);
      }
      if (LicenseNumber.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(LicenseNumber);
      }
      if (TotalSecondesTurnConditionerOn != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(TotalSecondesTurnConditionerOn);
      }
      if (Vbefore != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Vbefore);
      }
      if (CurrentKMGPS != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(CurrentKMGPS);
      }
      if (Temperature.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Temperature);
      }
      if (StartFuel != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(StartFuel);
      }
      if (EndFuel != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(EndFuel);
      }
      if (CellID != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(CellID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompanyId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompanyId);
      }
      if (VehicleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VehicleId);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (TotalTimeStop != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalTimeStop);
      }
      if (TotalSecondsTurnMachineOn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSecondsTurnMachineOn);
      }
      if (DriverName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DriverName);
      }
      if (LicenseNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LicenseNumber);
      }
      if (TotalSecondesTurnConditionerOn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSecondesTurnConditionerOn);
      }
      if (Vbefore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vbefore);
      }
      if (CurrentKMGPS != 0D) {
        size += 1 + 8;
      }
      if (Temperature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Temperature);
      }
      if (StartFuel != 0D) {
        size += 1 + 8;
      }
      if (EndFuel != 0D) {
        size += 2 + 8;
      }
      if (CellID != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CellID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReportStop other) {
      if (other == null) {
        return;
      }
      if (other.CompanyId != 0L) {
        CompanyId = other.CompanyId;
      }
      if (other.VehicleId != 0L) {
        VehicleId = other.VehicleId;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.TotalTimeStop != 0L) {
        TotalTimeStop = other.TotalTimeStop;
      }
      if (other.TotalSecondsTurnMachineOn != 0L) {
        TotalSecondsTurnMachineOn = other.TotalSecondsTurnMachineOn;
      }
      if (other.DriverName.Length != 0) {
        DriverName = other.DriverName;
      }
      if (other.LicenseNumber.Length != 0) {
        LicenseNumber = other.LicenseNumber;
      }
      if (other.TotalSecondesTurnConditionerOn != 0L) {
        TotalSecondesTurnConditionerOn = other.TotalSecondesTurnConditionerOn;
      }
      if (other.Vbefore != 0) {
        Vbefore = other.Vbefore;
      }
      if (other.CurrentKMGPS != 0D) {
        CurrentKMGPS = other.CurrentKMGPS;
      }
      if (other.Temperature.Length != 0) {
        Temperature = other.Temperature;
      }
      if (other.StartFuel != 0D) {
        StartFuel = other.StartFuel;
      }
      if (other.EndFuel != 0D) {
        EndFuel = other.EndFuel;
      }
      if (other.CellID != 0L) {
        CellID = other.CellID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CompanyId = input.ReadInt64();
            break;
          }
          case 16: {
            VehicleId = input.ReadInt64();
            break;
          }
          case 24: {
            StartTime = input.ReadInt64();
            break;
          }
          case 32: {
            EndTime = input.ReadInt64();
            break;
          }
          case 41: {
            Latitude = input.ReadDouble();
            break;
          }
          case 49: {
            Longitude = input.ReadDouble();
            break;
          }
          case 56: {
            TotalTimeStop = input.ReadInt64();
            break;
          }
          case 64: {
            TotalSecondsTurnMachineOn = input.ReadInt64();
            break;
          }
          case 74: {
            DriverName = input.ReadString();
            break;
          }
          case 82: {
            LicenseNumber = input.ReadString();
            break;
          }
          case 88: {
            TotalSecondesTurnConditionerOn = input.ReadInt64();
            break;
          }
          case 96: {
            Vbefore = input.ReadInt32();
            break;
          }
          case 105: {
            CurrentKMGPS = input.ReadDouble();
            break;
          }
          case 114: {
            Temperature = input.ReadString();
            break;
          }
          case 121: {
            StartFuel = input.ReadDouble();
            break;
          }
          case 129: {
            EndFuel = input.ReadDouble();
            break;
          }
          case 136: {
            CellID = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CompanyId = input.ReadInt64();
            break;
          }
          case 16: {
            VehicleId = input.ReadInt64();
            break;
          }
          case 24: {
            StartTime = input.ReadInt64();
            break;
          }
          case 32: {
            EndTime = input.ReadInt64();
            break;
          }
          case 41: {
            Latitude = input.ReadDouble();
            break;
          }
          case 49: {
            Longitude = input.ReadDouble();
            break;
          }
          case 56: {
            TotalTimeStop = input.ReadInt64();
            break;
          }
          case 64: {
            TotalSecondsTurnMachineOn = input.ReadInt64();
            break;
          }
          case 74: {
            DriverName = input.ReadString();
            break;
          }
          case 82: {
            LicenseNumber = input.ReadString();
            break;
          }
          case 88: {
            TotalSecondesTurnConditionerOn = input.ReadInt64();
            break;
          }
          case 96: {
            Vbefore = input.ReadInt32();
            break;
          }
          case 105: {
            CurrentKMGPS = input.ReadDouble();
            break;
          }
          case 114: {
            Temperature = input.ReadString();
            break;
          }
          case 121: {
            StartFuel = input.ReadDouble();
            break;
          }
          case 129: {
            EndFuel = input.ReadDouble();
            break;
          }
          case 136: {
            CellID = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
